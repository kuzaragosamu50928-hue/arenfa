# -*- coding: utf-8 -*-
import asyncio
import sqlite3
import json
import logging
import os
import signal
from datetime import datetime
from html import escape
from aiohttp import web
import telebot
from telebot.async_telebot import AsyncTeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
MODERATOR_BOT_TOKEN = os.getenv('MODERATOR_BOT_TOKEN')
HUNTER_BOT_TOKEN = os.getenv('HUNTER_BOT_TOKEN')
CHANNEL_ID = os.getenv('CHANNEL_ID')
ADMIN_ID = os.getenv('ADMIN_ID')
DOMAIN_NAME = os.getenv('DOMAIN_NAME', 'localhost')
DB_PATH = '/app/app_data/listings.db'
SUBMISSION_COOLDOWN = 900 # 15 –º–∏–Ω—É—Ç

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

moderator_bot = AsyncTeleBot(MODERATOR_BOT_TOKEN, parse_mode='HTML')
hunter_bot = AsyncTeleBot(HUNTER_BOT_TOKEN, parse_mode='HTML')
sync_bot = telebot.TeleBot(MODERATOR_BOT_TOKEN)

# --- –†–ê–ë–û–¢–ê –° –ë–ê–ó–û–ô –î–ê–ù–ù–´–• ---
def init_db():
    os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS user_sessions (user_id INTEGER PRIMARY KEY, step TEXT NOT NULL, data TEXT NOT NULL, updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS submissions (id INTEGER PRIMARY KEY AUTOINCREMENT, submission_id TEXT UNIQUE NOT NULL, submission_type TEXT NOT NULL, data TEXT NOT NULL, user_id INTEGER, created_at DATETIME DEFAULT CURRENT_TIMESTAMP)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS pending_publication (user_id INTEGER PRIMARY KEY, submission_type TEXT NOT NULL, data TEXT NOT NULL)''')
        cursor.execute('''CREATE TABLE IF NOT EXISTS listings (id INTEGER PRIMARY KEY AUTOINCREMENT, submission_id TEXT UNIQUE NOT NULL, listing_type TEXT NOT NULL, data TEXT NOT NULL, message_id INTEGER, published_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')
        conn.commit()
        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö '–ñ–µ–Ω–µ–≤–∞' —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")

def get_user_state(user_id):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT step, data FROM user_sessions WHERE user_id = ?", (user_id,))
            row = cursor.fetchone()
            if row: return {'step': row[0], 'data': json.loads(row[1])}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    return None

def set_user_state(user_id, step, data):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT OR REPLACE INTO user_sessions (user_id, step, data, updated_at) VALUES (?, ?, ?, CURRENT_TIMESTAMP)",
                       (user_id, step, json.dumps(data, ensure_ascii=False)))
        conn.commit()

def clear_user_state(user_id):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("DELETE FROM user_sessions WHERE user_id = ?", (user_id,))
        conn.commit()

async def save_submission_to_db(submission_id, submission_type, data, user_id):
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO submissions (submission_id, submission_type, data, user_id, created_at) VALUES (?, ?, ?, ?, ?)",
                       (submission_id, submission_type, json.dumps(data, ensure_ascii=False), user_id, datetime.now()))
        conn.commit()
    if ADMIN_ID:
        try:
            markup = InlineKeyboardMarkup()
            markup.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", url=f"http://{DOMAIN_NAME}/admin"))
            await moderator_bot.send_message(ADMIN_ID, "üõéÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=markup)
        except Exception as e:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {ADMIN_ID}: {e}")

# --- –õ–û–ì–ò–ö–ê –ë–û–¢–ê-–û–•–û–¢–ù–ò–ö–ê ---
@hunter_bot.message_handler(commands=['start'])
async def handle_start(message):
    user_id = message.chat.id
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT created_at FROM submissions WHERE user_id = ? ORDER BY created_at DESC LIMIT 1", (user_id,))
        row = cursor.fetchone()
        if row:
            try:
                last_submission_time = datetime.fromisoformat(row[0])
                if (datetime.now() - last_submission_time).total_seconds() < SUBMISSION_COOLDOWN:
                    await hunter_bot.send_message(user_id, f"‚è≥ –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –ø–æ–¥–∞–µ—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
                    return
            except (ValueError, TypeError):
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: {row[0]}")

    clear_user_state(user_id)
    set_user_state(user_id, 'start', {})
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(InlineKeyboardButton('üè† –°–¥–∞—Ç—å –∂–∏–ª—å—ë', callback_data='action_offer'))
    markup.add(InlineKeyboardButton('üîç –ò—â—É –∂–∏–ª—å—ë', callback_data='action_request'))
    await hunter_bot.send_message(user_id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –∂–∏–ª—å—ë –≤ –ú–µ–ª–∏—Ç–æ–ø–æ–ª–µ.\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

@hunter_bot.callback_query_handler(func=lambda call: call.data.startswith('action_'))
async def handle_action_choice(call):
    user_id = call.message.chat.id
    action = call.data.split('_')[1]
    if action == 'offer':
        set_user_state(user_id, 'offer_type', {'type': 'rent_offer'})
        markup = InlineKeyboardMarkup(row_width=2)
        markup.add(InlineKeyboardButton('üóì –ù–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫', callback_data='type_long_term'),
                   InlineKeyboardButton('‚òÄÔ∏è –ü–æ—Å—É—Ç–æ—á–Ω–æ', callback_data='type_daily'))
        await hunter_bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –∂–∏–ª—å—ë –Ω–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫ –∏–ª–∏ –ø–æ—Å—É—Ç–æ—á–Ω–æ?", user_id, call.message.message_id, reply_markup=markup)
    elif action == 'request':
        set_user_state(user_id, 'request_description', {'type': 'rent_request'})
        await hunter_bot.edit_message_text("–ü–æ–Ω–∏–º–∞—é. –û–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–∞–∫–æ–µ –∂–∏–ª—å—ë –≤—ã –∏—â–µ—Ç–µ (—Ä–∞–π–æ–Ω, –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç, –±—é–¥–∂–µ—Ç –∏ —Ç.–¥.). –≠—Ç—É –∑–∞—è–≤–∫—É —É–≤–∏–¥—è—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏.", user_id, call.message.message_id)

@hunter_bot.callback_query_handler(func=lambda call: call.data.startswith('type_'))
async def handle_offer_type(call):
    user_id = call.message.chat.id
    rent_type = call.data.replace('type_', '')
    state = get_user_state(user_id)
    if not state: return
    state['data']['rent_type'] = rent_type
    set_user_state(user_id, 'offer_description', state['data'])
    await hunter_bot.edit_message_text("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∂–∏–ª—å—è: –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç, –∞–¥—Ä–µ—Å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ç.–¥. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", user_id, call.message.message_id)

async def process_text_input(message, current_step_name, next_step, prompt):
    user_id = message.chat.id
    state = get_user_state(user_id)
    if not (state and state['step'] == current_step_name): return
    state['data'][current_step_name.replace('offer_', '')] = message.text
    set_user_state(user_id, next_step, state['data'])
    await hunter_bot.send_message(user_id, prompt)

@hunter_bot.message_handler(func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'offer_description')
async def handle_offer_description(message):
    state = get_user_state(message.chat.id)
    if not state: return
    rent_type = state['data'].get('rent_type')
    price_question = "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ –º–µ—Å—è—Ü." if rent_type == 'long_term' else "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ —Å—É—Ç–∫–∏."
    await process_text_input(message, 'offer_description', 'offer_price', f"–û—Ç–ª–∏—á–Ω–æ. {price_question} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ.")

@hunter_bot.message_handler(func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'offer_price')
async def handle_offer_price(message):
    if message.text.isdigit():
        state = get_user_state(message.chat.id)
        if not state: return
        state['data']['price'] = int(message.text)
        state['data']['photos'] = []
        set_user_state(message.chat.id, 'offer_photos', state['data'])
        await hunter_bot.send_message(message.chat.id, "–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ.")
    else:
        await hunter_bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")

@hunter_bot.message_handler(content_types=['photo'], func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'offer_photos')
async def handle_offer_photos(message):
    user_id = message.chat.id
    state = get_user_state(user_id)
    if not state: return

    state['data']['photos'].append(message.photo[-1].file_id)
    set_user_state(user_id, 'offer_photos', state['data'])

    markup = InlineKeyboardMarkup(row_width=2)
    finish_button = InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="photos_done")
    
    if len(state['data']['photos']) < 5:
        add_more_button = InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more_photos")
        markup.add(add_more_button, finish_button)
        await hunter_bot.send_message(user_id, f"–§–æ—Ç–æ {len(state['data']['photos'])}/5 –¥–æ–±–∞–≤–ª–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?", reply_markup=markup)
    else:
        markup.add(finish_button)
        await hunter_bot.send_message(user_id, "–õ–∏–º–∏—Ç –≤ 5 —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)

@hunter_bot.callback_query_handler(func=lambda call: call.data == 'add_more_photos')
async def handle_add_more_photos(call):
    await hunter_bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
    await hunter_bot.send_message(call.message.chat.id, "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ.")

@hunter_bot.callback_query_handler(func=lambda call: call.data == 'photos_done')
async def handle_offer_photos_done(call):
    user_id = call.message.chat.id
    state = get_user_state(user_id)
    if not state or not state['data'].get('photos'):
        await hunter_bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.", show_alert=True)
        return
    set_user_state(user_id, 'offer_contact', state['data'])
    await hunter_bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", user_id, call.message.message_id)
    await hunter_bot.send_message(user_id, "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤ Telegram –¥–ª—è —Å–≤—è–∑–∏.")

@hunter_bot.message_handler(func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'offer_contact')
async def handle_offer_contact_and_submit(message):
    user_id = message.chat.id
    state = get_user_state(user_id)
    if not state: return
    state['data']['contact'] = message.text
    state['data']['author_username'] = message.from_user.username
    state['data']['author_id'] = user_id
    submission_id = f"sub_{user_id}_{int(datetime.now().timestamp())}"
    submission_type = f"rent_offer_{state['data']['rent_type']}"
    await save_submission_to_db(submission_id, submission_type, state['data'], user_id)
    await hunter_bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
    clear_user_state(user_id)

@hunter_bot.message_handler(func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'request_description')
async def handle_request_description_and_submit(message):
    user_id = message.chat.id
    submission_id = f"sub_{user_id}_{int(datetime.now().timestamp())}"
    data = {'description': message.text, 'author_username': message.from_user.username, 'author_id': user_id}
    await save_submission_to_db(submission_id, 'rent_request', data, user_id)
    await hunter_bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –ø—Ä–∏–Ω—è—Ç–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ.")
    clear_user_state(user_id)

# --- –ë–û–¢-–ú–û–î–ï–†–ê–¢–û–† ---
@moderator_bot.message_handler(commands=['stats'])
async def handle_stats_command(message):
    if str(message.chat.id) == str(ADMIN_ID):
        try:
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT COUNT(*) FROM submissions")
                pending_count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM listings")
                active_count = cursor.fetchone()[0]
                cursor.execute("SELECT COUNT(*) FROM listings WHERE date(published_at) = date('now')")
                today_count = cursor.fetchone()[0]
            stat_text = (f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '–ñ–µ–Ω–µ–≤–∞'</b>\n\n"
                         f"üîµ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{pending_count}</b>\n"
                         f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{active_count}</b>\n"
                         f"üóì –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: <b>{today_count}</b>")
            await moderator_bot.send_message(ADMIN_ID, stat_text)
        except Exception as e:
            await moderator_bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@moderator_bot.message_handler(func=lambda message: True)
async def handle_address_and_publish(message):
    user_id = message.chat.id
    submission = None
    with sqlite3.connect(DB_PATH) as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT submission_type, data FROM pending_publication WHERE user_id=?", (user_id,))
        row = cursor.fetchone()
        if row:
            submission = {'type': row[0], 'data': json.loads(row[1])}
            cursor.execute("DELETE FROM pending_publication WHERE user_id=?", (user_id,))
            conn.commit()
    if not submission: return
    logger.info(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 1: –ü–æ–ª—É—á–µ–Ω –∞–¥—Ä–µ—Å –æ—Ç {user_id}. –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
    submission['data']['address'] = message.text
    submission_id = f"list_{user_id}_{int(datetime.now().timestamp())}"
    submission['data']['id'] = submission_id
    rent_type = submission['data'].get('rent_type')
    rent_type_text = "–ù–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫" if rent_type == 'long_term' else "–ü–æ—Å—É—Ç–æ—á–Ω–æ"
    price_suffix = "‚ÇΩ/–º–µ—Å." if rent_type == 'long_term' else "‚ÇΩ/—Å—É—Ç–∫–∏"
    caption = (f"<b>üè† {rent_type_text}</b>\n\n"
               f"{escape(submission['data'].get('description', ''))}\n\n"
               f"üìç <b>–ê–¥—Ä–µ—Å:</b> {escape(submission['data'].get('address', ''))}\n"
               f"üí∞ <b>–¶–µ–Ω–∞:</b> {submission['data'].get('price', '')} {price_suffix}\n"
               f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {escape(submission['data'].get('contact', ''))}")
    photos_ids = submission['data'].get('photos', [])
    msg = None
    try:
        logger.info(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 2: –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç. –§–æ—Ç–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(photos_ids)} —à—Ç.")
        if not photos_ids:
            logger.info("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 3: –§–æ—Ç–æ –Ω–µ—Ç. –ü—É–±–ª–∏–∫—É—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç...")
            msg = await moderator_bot.send_message(CHANNEL_ID, caption)
        elif len(photos_ids) == 1:
            file_id = photos_ids[0]
            logger.info(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–¥–Ω–æ —Ñ–æ—Ç–æ (file_id: {file_id})")
            file_info = await hunter_bot.get_file(file_id)
            file_content = await hunter_bot.download_file(file_info.file_path)
            logger.info(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 4: –§–∞–π–ª —Å–∫–∞—á–∞–Ω. –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–æ—Ç–æ –≤ –∫–∞–Ω–∞–ª...")
            msg = await moderator_bot.send_photo(CHANNEL_ID, file_content, caption=caption)
        else:
            logger.info(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 3: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É –∏–∑ {len(photos_ids)} —Ñ–æ—Ç–æ.")
            media = []
            for i, file_id in enumerate(photos_ids):
                logger.info(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 3.{i+1}: –°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ {file_id}")
                file_info = await hunter_bot.get_file(file_id)
                file_content = await hunter_bot.download_file(file_info.file_path)
                media.append(telebot.types.InputMediaPhoto(file_content, caption=caption if i == 0 else '', parse_mode='HTML'))
            if media:
                logger.info("[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 4: –û—Ç–ø—Ä–∞–≤–ª—è—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –≤ –∫–∞–Ω–∞–ª...")
                msgs = await asyncio.to_thread(sync_bot.send_media_group, CHANNEL_ID, media)
                msg = msgs[0] if msgs else None
        if msg:
            logger.info(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –®–∞–≥ 5: –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ –£–°–ü–ï–®–ù–ê (message_id: {msg.message_id}). –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute("INSERT INTO listings (submission_id, listing_type, data, message_id) VALUES (?, ?, ?, ?)",
                               (submission_id, submission.get('type'), json.dumps(submission.get('data')), msg.message_id))
                conn.commit()
            await moderator_bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ, –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞ –∫–∞—Ä—Ç—É.")
            logger.info(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ {submission_id} –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω).")
    except Exception as e:
        logger.exception(f"[–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê] –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞ —ç—Ç–∞–ø–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç {user_id}: {e}")
        await moderator_bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    finally:
        clear_user_state(user_id)

# --- WEB-–°–ï–†–í–ï–† ---
async def get_stats(request):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT COUNT(*) FROM submissions")
            pending_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM listings")
            active_count = cursor.fetchone()[0]
            cursor.execute("SELECT COUNT(*) FROM listings WHERE date(published_at) = date('now')")
            today_count = cursor.fetchone()[0]
        return web.json_response({'pending_count': pending_count, 'active_count': active_count, 'today_count': today_count})
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ API /api/stats: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def get_submissions(request):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT submission_id, submission_type, data FROM submissions ORDER BY created_at DESC")
            rows = cursor.fetchall()
            submissions = {row[0]: {'type': row[1], 'data': json.loads(row[2])} for row in rows}
        return web.json_response(submissions)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ API /api/submissions: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def get_listings(request):
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT submission_id, listing_type, data FROM listings WHERE listing_type LIKE 'rent_offer_%'")
            rows = cursor.fetchall()
            listings = {row[0]: {'type': row[1], 'data': json.loads(row[2])} for row in rows}
        return web.json_response(listings)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ API /api/listings: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def get_image(request):
    file_id = request.match_info.get('file_id')
    if not file_id: return web.Response(status=404)
    try:
        file_info = await hunter_bot.get_file(file_id)
        file_content = await hunter_bot.download_file(file_info.file_path)
        return web.Response(body=file_content, content_type='image/jpeg')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ {file_id}: {e}")
        return web.Response(status=500)

async def approve_submission(request):
    data = await request.json()
    submission_id = data.get('id')
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –û–î–û–ë–†–ò–¢–¨ –¥–ª—è ID: {submission_id}")
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT submission_type, data FROM submissions WHERE submission_id=?", (submission_id,))
            row = cursor.fetchone()
            if not row:
                logger.warning(f"–ó–∞—è–≤–∫–∞ {submission_id} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ submissions.")
                return web.json_response({'status': 'error', 'message': 'Submission not found'}, status=404)
            submission_type, submission_data_json = row
            submission_data = json.loads(submission_data_json)
            user_id = submission_data.get('author_id')
            cursor.execute("DELETE FROM submissions WHERE submission_id=?", (submission_id,))
            if submission_type.startswith('rent_offer'):
                cursor.execute("INSERT OR REPLACE INTO pending_publication (user_id, submission_type, data) VALUES (?, ?, ?)",
                               (user_id, submission_type, submission_data_json))
                await moderator_bot.send_message(user_id, "üéâ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ (–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º), —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç—É.")
            elif submission_type == 'rent_request':
                text = f"<b>üîç –ò—â—É –∂–∏–ª—å—ë</b>\n\n{escape(submission_data.get('description'))}\n\n" \
                       f"<b>üë§ –ê–≤—Ç–æ—Ä:</b> @{escape(submission_data.get('author_username') or '—Å–∫—Ä—ã—Ç')}"
                msg = await moderator_bot.send_message(CHANNEL_ID, text)
                cursor.execute("INSERT INTO listings (submission_id, listing_type, data, message_id) VALUES (?, ?, ?, ?)",
                               (submission_id, submission_type, submission_data_json, msg.message_id))
                await moderator_bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")
            conn.commit()
        logger.info(f"–ó–∞—è–≤–∫–∞ {submission_id} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return web.json_response({'status': 'ok'})
    except Exception as e:
        logger.exception(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –û–î–û–ë–†–ï–ù–ò–ò –∑–∞—è–≤–∫–∏ {submission_id}: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def reject_submission(request):
    data = await request.json()
    submission_id = data.get('id')
    reason = data.get('reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.')
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –û–¢–ö–õ–û–ù–ò–¢–¨ –¥–ª—è ID: {submission_id} —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}")
    try:
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT data FROM submissions WHERE submission_id=?", (submission_id,))
            row = cursor.fetchone()
            if not row:
                return web.json_response({'status': 'error', 'message': 'Submission not found'}, status=404)
            user_id = json.loads(row[0]).get('author_id')
            cursor.execute("DELETE FROM submissions WHERE submission_id=?", (submission_id,))
            conn.commit()
        if user_id:
            try:
                await moderator_bot.send_message(user_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n\n<i>–ü—Ä–∏—á–∏–Ω–∞: {escape(reason)}</i>")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")
        logger.info(f"–ó–∞—è–≤–∫–∞ {submission_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        return web.json_response({'status': 'ok'})
    except Exception as e:
        logger.exception(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –û–¢–ö–õ–û–ù–ï–ù–ò–ò –∑–∞—è–≤–∫–∏ {submission_id}: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def serve_admin_panel(request):
    return web.FileResponse('./admin_panel.html')

async def serve_public_map(request):
    return web.FileResponse('./public_map.html')

async def graceful_shutdown(app_runner, tasks):
    logger.info("–ù–∞—á–∏–Ω–∞—é –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    for task in tasks:
        task.cancel()
    await asyncio.gather(*tasks, return_exceptions=True)
    if app_runner:
        await app_runner.cleanup()
    logger.info("–°–µ—Ä–≤–µ—Ä –∏ –±–æ—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã.")

async def main():
    init_db()
    app = web.Application()
    app.router.add_get('/api/stats', get_stats)
    app.router.add_get('/api/submissions', get_submissions)
    app.router.add_get('/api/listings', get_listings)
    app.router.add_get('/api/image/{file_id}', get_image)
    app.router.add_post('/api/approve', approve_submission)
    app.router.add_post('/api/reject', reject_submission)
    app.router.add_get('/admin', serve_admin_panel)
    app.router.add_get('/', serve_public_map)
    app.router.add_get('/map', serve_public_map)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8080)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä '–ñ–µ–Ω–µ–≤–∞' –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://0.0.0.0:8080")
    
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤...")
    polling_tasks = [
        asyncio.create_task(hunter_bot.polling(non_stop=True, request_timeout=90)),
        asyncio.create_task(moderator_bot.polling(non_stop=True, request_timeout=90))
    ]
    
    loop = asyncio.get_running_loop()
    stop_event = asyncio.Event()

    def signal_handler():
        if not stop_event.is_set():
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏, –Ω–∞—á–∏–Ω–∞—é –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...")
            stop_event.set()
            asyncio.create_task(graceful_shutdown(runner, polling_tasks))

    for sig in (signal.SIGINT, signal.SIGTERM):
        loop.add_signal_handler(sig, signal_handler)

    try:
        await asyncio.gather(*polling_tasks)
    except asyncio.CancelledError:
        logger.info("–ó–∞–¥–∞—á–∏ –æ–ø—Ä–æ—Å–∞ –±–æ—Ç–æ–≤ –±—ã–ª–∏ –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        
if __name__ == '__main__':
    if not all([MODERATOR_BOT_TOKEN, HUNTER_BOT_TOKEN, CHANNEL_ID, ADMIN_ID]):
        logger.critical("–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
        exit(1)
    
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except Exception as e:
        logger.exception(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}")

