import asyncio
from datetime import datetime
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

from .utils import hunter_bot
from src.database import (
    get_user_state,
    set_user_state,
    clear_user_state,
    save_submission_to_db,
    get_last_submission_time
)
from src.config import SUBMISSION_COOLDOWN, ADMIN_ID, DOMAIN_NAME, logger
from src.bots.utils import moderator_bot

# --- –õ–û–ì–ò–ö–ê –ë–û–¢–ê-–û–•–û–¢–ù–ò–ö–ê ---

def register_hunter_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞-–æ—Ö–æ—Ç–Ω–∏–∫–∞."""

    @hunter_bot.message_handler(commands=['start'])
    async def handle_start(message):
        user_id = message.chat.id

        last_submission_time = await get_last_submission_time(user_id)
        if last_submission_time and (datetime.now() - last_submission_time).total_seconds() < SUBMISSION_COOLDOWN:
            await hunter_bot.send_message(user_id, "‚è≥ –í—ã —Å–ª–∏—à–∫–æ–º —á–∞—Å—Ç–æ –ø–æ–¥–∞–µ—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            return

        await clear_user_state(user_id)
        await set_user_state(user_id, 'start', {})
        markup = InlineKeyboardMarkup(row_width=1)
        markup.add(InlineKeyboardButton('üè† –°–¥–∞—Ç—å –∂–∏–ª—å—ë', callback_data='action_offer'))
        markup.add(InlineKeyboardButton('üîç –ò—â—É –∂–∏–ª—å—ë', callback_data='action_request'))
        await hunter_bot.send_message(user_id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –Ø –ø–æ–º–æ–≥—É –≤–∞–º —Å–¥–∞—Ç—å –∏–ª–∏ –Ω–∞–π—Ç–∏ –∂–∏–ª—å—ë –≤ –ú–µ–ª–∏—Ç–æ–ø–æ–ª–µ.\n\n–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=markup)

    @hunter_bot.callback_query_handler(func=lambda call: call.data.startswith('action_'))
    async def handle_action_choice(call):
        user_id = call.message.chat.id
        action = call.data.split('_')[1]

        if action == 'offer':
            await set_user_state(user_id, 'offer_type', {'type': 'rent_offer'})
            markup = InlineKeyboardMarkup(row_width=2)
            markup.add(InlineKeyboardButton('üóì –ù–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫', callback_data='type_long_term'),
                       InlineKeyboardButton('‚òÄÔ∏è –ü–æ—Å—É—Ç–æ—á–Ω–æ', callback_data='type_daily'))
            await hunter_bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å –∂–∏–ª—å—ë –Ω–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫ –∏–ª–∏ –ø–æ—Å—É—Ç–æ—á–Ω–æ?", user_id, call.message.message_id, reply_markup=markup)
        elif action == 'request':
            await set_user_state(user_id, 'request_description', {'type': 'rent_request'})
            await hunter_bot.edit_message_text("–ü–æ–Ω–∏–º–∞—é. –û–ø–∏—à–∏—Ç–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –∫–∞–∫–æ–µ –∂–∏–ª—å—ë –≤—ã –∏—â–µ—Ç–µ (—Ä–∞–π–æ–Ω, –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç, –±—é–¥–∂–µ—Ç –∏ —Ç.–¥.). –≠—Ç—É –∑–∞—è–≤–∫—É —É–≤–∏–¥—è—Ç —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏.", user_id, call.message.message_id)

    @hunter_bot.callback_query_handler(func=lambda call: call.data.startswith('type_'))
    async def handle_offer_type(call):
        user_id = call.message.chat.id
        rent_type = call.data.replace('type_', '')
        state = await get_user_state(user_id)
        if not state: return
        state['data']['rent_type'] = rent_type
        await set_user_state(user_id, 'offer_description', state['data'])
        await hunter_bot.edit_message_text("–¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∂–∏–ª—å—è: –∫–æ–ª-–≤–æ –∫–æ–º–Ω–∞—Ç, –∞–¥—Ä–µ—Å, —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –º–µ–±–µ–ª—å, —Ç–µ—Ö–Ω–∏–∫–∞ –∏ —Ç.–¥. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.", user_id, call.message.message_id)

    async def process_text_input(message, current_step_name, next_step, prompt):
        user_id = message.chat.id
        state = await get_user_state(user_id)
        if not (state and state['step'] == current_step_name): return
        state['data'][current_step_name.replace('offer_', '')] = message.text
        await set_user_state(user_id, next_step, state['data'])
        await hunter_bot.send_message(user_id, prompt)

    @hunter_bot.message_handler(func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'offer_description')
    async def handle_offer_description(message):
        state = await get_user_state(message.chat.id)
        if not state: return
        rent_type = state['data'].get('rent_type')
        price_question = "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ –º–µ—Å—è—Ü." if rent_type == 'long_term' else "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö –∑–∞ —Å—É—Ç–∫–∏."
        await process_text_input(message, 'offer_description', 'offer_price', f"–û—Ç–ª–∏—á–Ω–æ. {price_question} –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —á–∏—Å–ª–æ.")

    @hunter_bot.message_handler(func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'offer_price')
    async def handle_offer_price(message):
        if message.text.isdigit():
            state = await get_user_state(message.chat.id)
            if not state: return
            state['data']['price'] = int(message.text)
            state['data']['photos'] = []
            await set_user_state(message.chat.id, 'offer_photos', state['data'])
            await hunter_bot.send_message(message.chat.id, "–ü–æ–Ω—è–ª. –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–µ –ª—É—á—à–µ–µ —Ñ–æ—Ç–æ. –ü–æ–∑–∂–µ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ.")
        else:
            await hunter_bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ü–∏—Ñ—Ä–∞–º–∏, –±–µ–∑ –¥—Ä—É–≥–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤.")

    @hunter_bot.message_handler(content_types=['photo'], func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'offer_photos')
    async def handle_offer_photos(message):
        user_id = message.chat.id
        state = await get_user_state(user_id)
        if not state: return

        state['data']['photos'].append(message.photo[-1].file_id)
        await set_user_state(user_id, 'offer_photos', state['data'])

        markup = InlineKeyboardMarkup(row_width=2)
        finish_button = InlineKeyboardButton("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="photos_done")

        if len(state['data']['photos']) < 5:
            add_more_button = InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ", callback_data="add_more_photos")
            markup.add(add_more_button, finish_button)
            await hunter_bot.send_message(user_id, f"–§–æ—Ç–æ {len(state['data']['photos'])}/5 –¥–æ–±–∞–≤–ª–µ–Ω–æ. –•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å?", reply_markup=markup)
        else:
            markup.add(finish_button)
            await hunter_bot.send_message(user_id, "–õ–∏–º–∏—Ç –≤ 5 —Ñ–æ—Ç–æ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç. –ù–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å', —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.", reply_markup=markup)

    @hunter_bot.callback_query_handler(func=lambda call: call.data == 'add_more_photos')
    async def handle_add_more_photos(call):
        await hunter_bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id)
        await hunter_bot.send_message(call.message.chat.id, "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ —Ñ–æ—Ç–æ.")

    @hunter_bot.callback_query_handler(func=lambda call: call.data == 'photos_done')
    async def handle_offer_photos_done(call):
        user_id = call.message.chat.id
        state = await get_user_state(user_id)
        if not state or not state['data'].get('photos'):
            await hunter_bot.answer_callback_query(call.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.", show_alert=True)
            return
        await set_user_state(user_id, 'offer_contact', state['data'])
        await hunter_bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.", user_id, call.message.message_id)
        await hunter_bot.send_message(user_id, "–ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –≤ Telegram –¥–ª—è —Å–≤—è–∑–∏.")

    async def finalize_submission(user_id, state, submission_type):
        submission_id = f"sub_{user_id}_{int(datetime.now().timestamp())}"
        await save_submission_to_db(submission_id, submission_type, state['data'], user_id)

        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        if ADMIN_ID:
            try:
                markup = InlineKeyboardMarkup()
                markup.add(InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", url=f"http://{DOMAIN_NAME}/admin"))
                await moderator_bot.send_message(ADMIN_ID, "üõéÔ∏è –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é!", reply_markup=markup)
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {ADMIN_ID}: {e}")

        await hunter_bot.send_message(user_id, "–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é. –û–Ω–æ –ø–æ—è–≤–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        await clear_user_state(user_id)

    @hunter_bot.message_handler(func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'offer_contact')
    async def handle_offer_contact_and_submit(message):
        user_id = message.chat.id
        state = await get_user_state(user_id)
        if not state: return
        state['data']['contact'] = message.text
        state['data']['author_username'] = message.from_user.username
        state['data']['author_id'] = user_id
        submission_type = f"rent_offer_{state['data']['rent_type']}"
        await finalize_submission(user_id, state, submission_type)

    @hunter_bot.message_handler(func=lambda m: get_user_state(m.chat.id) and get_user_state(m.chat.id).get('step') == 'request_description')
    async def handle_request_description_and_submit(message):
        user_id = message.chat.id
        state = await get_user_state(user_id)
        if not state: return
        state['data']['description'] = message.text
        state['data']['author_username'] = message.from_user.username
        state['data']['author_id'] = user_id
        await finalize_submission(user_id, state, 'rent_request')

    # –≠—Ç–æ—Ç —Ö–∞–Ω–¥–ª–µ—Ä –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å, —á—Ç–æ–±—ã –æ–Ω –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å –¥—Ä—É–≥–∏–º–∏.
    # –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ –µ—Å—Ç—å, –Ω–æ —Å `get_user_state` –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    @hunter_bot.message_handler(func=lambda m: not get_user_state(m.chat.id))
    async def handle_unsolicited_messages(message):
        await hunter_bot.send_message(message.chat.id, "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞-–æ—Ö–æ—Ç–Ω–∏–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")