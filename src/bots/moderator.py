import asyncio
import json
from html import escape
import telebot.types
import aiosqlite

from .utils import moderator_bot, sync_moderator_bot, hunter_bot
from src.database import add_listing, clear_user_state
from src.config import ADMIN_ID, CHANNEL_ID, DB_PATH, logger

async def publish_listing(user_id, submission):
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª."""
    logger.info(f"–ù–∞—á–∏–Ω–∞—é –ø—Ä–æ—Ü–µ—Å—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}.")

    submission_data = submission['data']
    submission_id = f"list_{user_id}_{int(asyncio.to_thread(lambda: __import__('datetime').datetime.now().timestamp()))}"
    submission_data['id'] = submission_id

    rent_type = submission_data.get('rent_type')
    rent_type_text = "–ù–∞ –¥–æ–ª–≥–∏–π —Å—Ä–æ–∫" if rent_type == 'long_term' else "–ü–æ—Å—É—Ç–æ—á–Ω–æ"
    price_suffix = "‚ÇΩ/–º–µ—Å." if rent_type == 'long_term' else "‚ÇΩ/—Å—É—Ç–∫–∏"

    caption = (
        f"<b>üè† {rent_type_text}</b>\n\n"
        f"{escape(submission_data.get('description', ''))}\n\n"
        f"üìç <b>–ê–¥—Ä–µ—Å:</b> {escape(submission_data.get('address', ''))}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {submission_data.get('price', '')} {price_suffix}\n"
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {escape(submission_data.get('contact', ''))}"
    )

    photos_ids = submission_data.get('photos', [])
    msg = None

    try:
        if not photos_ids:
            logger.info("–§–æ—Ç–æ –Ω–µ—Ç. –ü—É–±–ª–∏–∫—É—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç.")
            msg = await moderator_bot.send_message(CHANNEL_ID, caption)
        elif len(photos_ids) == 1:
            file_id = photos_ids[0]
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –æ–¥–Ω–æ —Ñ–æ—Ç–æ (file_id: {file_id})")
            file_info = await hunter_bot.get_file(file_id)
            file_content = await hunter_bot.download_file(file_info.file_path)
            msg = await moderator_bot.send_photo(CHANNEL_ID, file_content, caption=caption)
        else:
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥—Ä—É–ø–ø—É –∏–∑ {len(photos_ids)} —Ñ–æ—Ç–æ.")
            media = []
            for i, file_id in enumerate(photos_ids):
                logger.info(f"–°–∫–∞—á–∏–≤–∞—é —Ñ–æ—Ç–æ {i+1}/{len(photos_ids)}: {file_id}")
                file_info = await hunter_bot.get_file(file_id)
                file_content = await hunter_bot.download_file(file_info.file_path)
                # –ü–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—ã –Ω–µ—Å–µ—Ç –ø–æ–¥–ø–∏—Å—å
                media.append(telebot.types.InputMediaPhoto(file_content, caption=caption if i == 0 else '', parse_mode='HTML'))

            if media:
                logger.info("–û—Ç–ø—Ä–∞–≤–ª—è—é –º–µ–¥–∏–∞-–≥—Ä—É–ø–ø—É –≤ –∫–∞–Ω–∞–ª...")
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º to_thread –¥–ª—è –Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
                msgs = await asyncio.to_thread(sync_moderator_bot.send_media_group, CHANNEL_ID, media)
                msg = msgs[0] if msgs else None

        if msg:
            logger.info(f"–ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª–µ –£–°–ü–ï–®–ù–ê (message_id: {msg.message_id}). –°–æ—Ö—Ä–∞–Ω—è—é –≤ –±–∞–∑—É.")
            await add_listing(submission_id, submission.get('type'), submission_data, msg.message_id)
            await moderator_bot.send_message(user_id, "–û—Ç–ª–∏—á–Ω–æ, –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
        else:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª (–æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω).")

    except Exception as e:
        logger.exception(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –Ω–∞ —ç—Ç–∞–ø–µ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –æ—Ç {user_id}: {e}")
        await moderator_bot.send_message(user_id, "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤–∞—à–µ–≥–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")
    finally:
        await clear_user_state(user_id)


def register_moderator_handlers():
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞."""

    @moderator_bot.message_handler(commands=['stats'])
    async def handle_stats_command(message):
        if str(message.chat.id) != str(ADMIN_ID):
            return

        try:
            async with aiosqlite.connect(DB_PATH) as db:
                async with db.execute("SELECT COUNT(*) FROM submissions") as cursor:
                    pending_count = (await cursor.fetchone())[0]
                async with db.execute("SELECT COUNT(*) FROM listings") as cursor:
                    active_count = (await cursor.fetchone())[0]
                async with db.execute("SELECT COUNT(*) FROM listings WHERE date(published_at) = date('now')") as cursor:
                    today_count = (await cursor.fetchone())[0]

            stat_text = (
                f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ '–ñ–µ–Ω–µ–≤–∞'</b>\n\n"
                f"üîµ –û–∂–∏–¥–∞—é—Ç –º–æ–¥–µ—Ä–∞—Ü–∏–∏: <b>{pending_count}</b>\n"
                f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: <b>{active_count}</b>\n"
                f"üóì –û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —Å–µ–≥–æ–¥–Ω—è: <b>{today_count}</b>"
            )
            await moderator_bot.send_message(ADMIN_ID, stat_text)
        except Exception as e:
            await moderator_bot.send_message(ADMIN_ID, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    @moderator_bot.message_handler(func=lambda message: True)
    async def handle_address_and_publish(message):
        user_id = message.chat.id
        submission = None

        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT submission_type, data FROM pending_publication WHERE user_id=?", (user_id,)) as cursor:
                row = await cursor.fetchone()
                if row:
                    submission = {'type': row[0], 'data': json.loads(row[1])}
                    await db.execute("DELETE FROM pending_publication WHERE user_id=?", (user_id,))
                    await db.commit()

        if not submission:
            return

        submission['data']['address'] = message.text
        await publish_listing(user_id, submission)

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")