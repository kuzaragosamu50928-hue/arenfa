import json
import aiosqlite
from html import escape
from aiohttp import web

from src.config import DB_PATH, logger, CHANNEL_ID
from src.bots.utils import hunter_bot, moderator_bot

# --- API —Ö–µ–Ω–¥–ª–µ—Ä—ã ---

async def get_stats(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞—è–≤–∫–∞–º –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è–º."""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            async with db.execute("SELECT COUNT(*) FROM submissions") as cursor:
                pending_count = (await cursor.fetchone())[0]
            async with db.execute("SELECT COUNT(*) FROM listings") as cursor:
                active_count = (await cursor.fetchone())[0]
            async with db.execute("SELECT COUNT(*) FROM listings WHERE date(published_at) = date('now')") as cursor:
                today_count = (await cursor.fetchone())[0]
        return web.json_response({
            'pending_count': pending_count,
            'active_count': active_count,
            'today_count': today_count
        })
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ API /api/stats: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def get_submissions(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫, –æ–∂–∏–¥–∞—é—â–∏—Ö –º–æ–¥–µ—Ä–∞—Ü–∏–∏."""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT submission_id, submission_type, data FROM submissions ORDER BY created_at DESC")
            rows = await cursor.fetchall()
            submissions = {row[0]: {'type': row[1], 'data': json.loads(row[2])} for row in rows}
        return web.json_response(submissions)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ API /api/submissions: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def get_listings(request):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π –æ —Å–¥–∞—á–µ."""
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT submission_id, listing_type, data FROM listings WHERE listing_type LIKE 'rent_offer_%'")
            rows = await cursor.fetchall()
            listings = {row[0]: {'type': row[1], 'data': json.loads(row[2])} for row in rows}
        return web.json_response(listings)
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ API /api/listings: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def get_image(request):
    """–û—Ç–¥–∞–µ—Ç —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ –µ–≥–æ file_id."""
    file_id = request.match_info.get('file_id')
    if not file_id:
        return web.Response(status=404)
    try:
        file_info = await hunter_bot.get_file(file_id)
        file_content = await hunter_bot.download_file(file_info.file_path)
        return web.Response(body=file_content, content_type='image/jpeg')
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ñ–æ—Ç–æ {file_id}: {e}")
        return web.Response(status=500)

async def approve_submission(request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    data = await request.json()
    submission_id = data.get('id')
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –û–î–û–ë–†–ò–¢–¨ –¥–ª—è ID: {submission_id}")
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT submission_type, data FROM submissions WHERE submission_id=?", (submission_id,))
            row = await cursor.fetchone()
            if not row:
                logger.warning(f"–ó–∞—è–≤–∫–∞ {submission_id} –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ submissions.")
                return web.json_response({'status': 'error', 'message': 'Submission not found'}, status=404)

            submission_type, submission_data_json = row
            submission_data = json.loads(submission_data_json)
            user_id = submission_data.get('author_id')

            await db.execute("DELETE FROM submissions WHERE submission_id=?", (submission_id,))

            if submission_type.startswith('rent_offer'):
                await db.execute("INSERT OR REPLACE INTO pending_publication (user_id, submission_type, data) VALUES (?, ?, ?)",
                                 (user_id, submission_type, submission_data_json))
                await moderator_bot.send_message(user_id, "üéâ –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ–¥–æ–±—Ä–µ–Ω–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥: –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ç–æ—á–Ω—ã–π –∞–¥—Ä–µ—Å –æ–±—ä–µ–∫—Ç–∞ (–ì–æ—Ä–æ–¥, –£–ª–∏—Ü–∞, –î–æ–º), —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –Ω–∞ –∫–∞—Ä—Ç—É.")
            elif submission_type == 'rent_request':
                text = (f"<b>üîç –ò—â—É –∂–∏–ª—å—ë</b>\n\n"
                        f"{escape(submission_data.get('description'))}\n\n"
                        f"<b>üë§ –ê–≤—Ç–æ—Ä:</b> @{escape(submission_data.get('author_username') or '—Å–∫—Ä—ã—Ç')}")
                msg = await moderator_bot.send_message(CHANNEL_ID, text)
                await db.execute("INSERT INTO listings (submission_id, listing_type, data, message_id) VALUES (?, ?, ?, ?)",
                                 (submission_id, submission_type, submission_data_json, msg.message_id))
                await moderator_bot.send_message(user_id, "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–∏—Å–∫ –æ–¥–æ–±—Ä–µ–Ω–∞ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")

            await db.commit()
        logger.info(f"–ó–∞—è–≤–∫–∞ {submission_id} —É—Å–ø–µ—à–Ω–æ –æ–¥–æ–±—Ä–µ–Ω–∞.")
        return web.json_response({'status': 'ok'})
    except Exception as e:
        logger.exception(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –û–î–û–ë–†–ï–ù–ò–ò –∑–∞—è–≤–∫–∏ {submission_id}: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

async def reject_submission(request):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏."""
    data = await request.json()
    submission_id = data.get('id')
    reason = data.get('reason', '–ü—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞.')
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –û–¢–ö–õ–û–ù–ò–¢–¨ –¥–ª—è ID: {submission_id} —Å –ø—Ä–∏—á–∏–Ω–æ–π: {reason}")
    try:
        async with aiosqlite.connect(DB_PATH) as db:
            cursor = await db.execute("SELECT data FROM submissions WHERE submission_id=?", (submission_id,))
            row = await cursor.fetchone()
            if not row:
                return web.json_response({'status': 'error', 'message': 'Submission not found'}, status=404)

            user_id = json.loads(row[0]).get('author_id')
            await db.execute("DELETE FROM submissions WHERE submission_id=?", (submission_id,))
            await db.commit()

        if user_id:
            try:
                await moderator_bot.send_message(user_id, f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.\n\n<i>–ü—Ä–∏—á–∏–Ω–∞: {escape(reason)}</i>")
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏: {e}")

        logger.info(f"–ó–∞—è–≤–∫–∞ {submission_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        return web.json_response({'status': 'ok'})
    except Exception as e:
        logger.exception(f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ø—Ä–∏ –û–¢–ö–õ–û–ù–ï–ù–ò–ò –∑–∞—è–≤–∫–∏ {submission_id}: {e}")
        return web.json_response({'status': 'error', 'message': 'Internal Server Error'}, status=500)

# --- –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ ---

async def serve_admin_panel(request):
    """–û—Ç–¥–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏."""
    return web.FileResponse('./admin_panel.html')

# –í –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É–±–ª–∏—á–Ω–∞—è –∫–∞—Ä—Ç–∞
async def serve_public_map(request):
    """–û—Ç–¥–∞–µ—Ç HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É –ø—É–±–ª–∏—á–Ω–æ–π –∫–∞—Ä—Ç—ã."""
    # –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–∏–º–µ—Ä–∞, –ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ public_map.html –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç,
    # –∏ –º—ã –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É.
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –±—ã–ª –±—ã —Å–≤–æ–π —Ñ–∞–π–ª.
    # return web.FileResponse('./public_map.html')
    return web.HTTPFound('/admin')